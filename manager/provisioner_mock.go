// Code generated by mockery v2.53.4. DO NOT EDIT.

package manager

import (
	context "context"

	tlsv3 "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
	mock "github.com/stretchr/testify/mock"
)

// MockProvisioner is an autogenerated mock type for the Provisioner type
type MockProvisioner struct {
	mock.Mock
}

type MockProvisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvisioner) EXPECT() *MockProvisioner_Expecter {
	return &MockProvisioner_Expecter{mock: &_m.Mock}
}

// GetResources provides a mock function with given fields: ctx, resources
func (_m *MockProvisioner) GetResources(ctx context.Context, resources []string) ([]tlsv3.Secret, error) {
	ret := _m.Called(ctx, resources)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []tlsv3.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]tlsv3.Secret, error)); ok {
		return rf(ctx, resources)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []tlsv3.Secret); ok {
		r0 = rf(ctx, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tlsv3.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvisioner_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type MockProvisioner_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
//   - resources []string
func (_e *MockProvisioner_Expecter) GetResources(ctx interface{}, resources interface{}) *MockProvisioner_GetResources_Call {
	return &MockProvisioner_GetResources_Call{Call: _e.mock.On("GetResources", ctx, resources)}
}

func (_c *MockProvisioner_GetResources_Call) Run(run func(ctx context.Context, resources []string)) *MockProvisioner_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockProvisioner_GetResources_Call) Return(_a0 []tlsv3.Secret, _a1 error) *MockProvisioner_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvisioner_GetResources_Call) RunAndReturn(run func(context.Context, []string) ([]tlsv3.Secret, error)) *MockProvisioner_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvisioner creates a new instance of MockProvisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvisioner {
	mock := &MockProvisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
